setwd("~/Documents/Documents/Linguistics/Projects/romance_nominal_change/Cleanup20160624/Main Code 7/Cases5/TokFreqF")
getwd()
files <- list.files(pattern = "\\.txt")
files
files <- list.files(pattern = "\\.txt")
files
getwd()
getwd()
setwd(paste0(directory, collapse = ""))
opts_knit$set(root.dir = "directory")
require("knitr")
# Parameters: Token Frequency and Number of Cases
tokfreq <- "F"
ncases <- "5"
code <- 7
# Look only for most common suffix or for all suffixes below threshold?
onlymax <- FALSE
# IF APPLY SOUND CHANGE
if (code == 7) {
language <- "Common"
soundchange <- TRUE
} else {
language <- 'Common'
soundchange <- FALSE
}
# Number below which to drop
above <- 10
# Now set directory
directory <- c('../Main Code ', code, '/Cases', ncases, "/TokFreq", tokfreq, "/")
if (code == 9) directory <- c(directory[1:4], c("/", language), directory[5:6])
setwd(paste0(directory, collapse = ""))
# setwd(paste0('../Main Code ', code, '/Cases', ncases, "/TokFreq", tokfreq))
opts_knit$set(root.dir = "directory")
getwd()
getwd()
require("knitr")
# Parameters: Token Frequency and Number of Cases
tokfreq <- "F"
ncases <- "5"
code <- 7
# Look only for most common suffix or for all suffixes below threshold?
onlymax <- FALSE
# IF APPLY SOUND CHANGE
if (code == 7) {
language <- "Common"
soundchange <- TRUE
} else {
language <- 'Common'
soundchange <- FALSE
}
# Number below which to drop
above <- 10
# Now set directory
directory <- c('../Main Code ', code, '/Cases', ncases, "/TokFreq", tokfreq, "/")
if (code == 9) directory <- c(directory[1:4], c("/", language), directory[5:6])
# setwd(paste0(directory, collapse = ""))
# # setwd(paste0('../Main Code ', code, '/Cases', ncases, "/TokFreq", tokfreq))
opts_knit$set(root.dir = "directory")
opts_knit$set(root.dir = directory)
getwd()
directory
directory <- paste0('../Main Code ', code, '/Cases', ncases, "/TokFreq", tokfreq, "/")
directory
opts_knit$set(root.dir = directory)
getwd()
getwd()
getwd()
knitr::opts_knit$set(root.dir = directory)
getwd()
require("knitr")
# Parameters: Token Frequency and Number of Cases
tokfreq <- "F"
ncases <- "5"
code <- 7
# Look only for most common suffix or for all suffixes below threshold?
onlymax <- FALSE
# IF APPLY SOUND CHANGE
if (code == 7) {
language <- "Common"
soundchange <- TRUE
} else {
language <- 'Common'
soundchange <- FALSE
}
# Number below which to drop
above <- 10
# Now set directory
directory <- paste0('../Main Code ', code, '/Cases', ncases, "/TokFreq", tokfreq, "/")
if (code == 9) directory <- c(directory[1:4], c("/", language), directory[5:6])
# setwd(paste0(directory, collapse = ""))
# # setwd(paste0('../Main Code ', code, '/Cases', ncases, "/TokFreq", tokfreq))
knitr::opts_knit$set(root.dir = directory)
getwd()
for (i in 1:length(files)) {
f = files[i]
# Count human as same as nonhuman
df <- read.delim(f, stringsAsFactors = FALSE)
# Modify endings files
colnames(df)[which(names(df) == "X10")] <- "Suffix"
df[df == 'mh'] <- 'm'
df[df == 'fh'] <- 'f'
df[df == 'mh, fh'] <- 'm'
df[df == 'm, f'] <- 'm'
if (soundchange == TRUE) df$Suffix <- applySoundChange(df$Suffix, language)
df[is.na(df)] <- '-'
df[df == ''] <- '-'
sub_df <- count(subset(df, select = c('Suffix', 'Declension', 'Gender', 'Num', 'Case')))
full_tables[[as.character(i)]] <- sub_df
# Initialize vector for system
systems_df[[as.character(i)]] <- data.frame('Combo' = character(),
'1' = character(),
'2' = character(),
'3' = character(),
'4' = character(),
'5' = character())
for (num in global_nums) {
# Only Num
ft <- freqTable(df = sub_df, num = num)
freq_tables[[num]][[as.character(i)]] <- ft
endings[[num]][[as.character(i)]] <- getEndings(ft, above = above)
all_endings[[num]][[as.character(i)]] <- getEndings(ft, above = 0)
max_endings[[num]][[as.character(i)]] <- maxSuf(ft)
if (ncases > 2) {
for (combo in global_casecombos) {
# Only Case Combo and Num
ft <- freqTable(df = sub_df, case = unlist(strsplit(combo, ',')), num = num)
freq_tables[[paste0(num, combo)]][[as.character(i)]] <- ft
endings[[paste0(num, combo)]][[as.character(i)]] <- getEndings(ft, above = above)
all_endings[[paste0(num, combo)]][[as.character(i)]] <- getEndings(ft, above = 0)
max_endings[[paste0(num, combo)]][[as.character(i)]] <- maxSuf(ft)
for (dec in global_decs) {
# Case Combo, Dec, and Num
ft <- freqTable(df = sub_df, case = unlist(strsplit(combo, ',')), dec = dec, num = num)
freq_tables[[paste0(dec, num, combo)]][[as.character(i)]] <- ft
endings[[paste0(dec, num, combo)]][[as.character(i)]] <- getEndings(ft, above = above)
all_endings[[paste0(dec, num, combo)]][[as.character(i)]] <- getEndings(ft, above = 0)
max_endings[[paste0(dec, num, combo)]][[as.character(i)]] <- maxSuf(ft)
}
for (gender in global_genders) {
# Case Combo, Gender, and Num
ft <- freqTable(df = sub_df, case = unlist(strsplit(combo, ',')), gender = gender, num = num)
freq_tables[[paste0(gender, num, combo)]][[as.character(i)]] <- ft
endings[[paste0(gender, num, combo)]][[as.character(i)]] <- getEndings(ft, above = above)
all_endings[[paste0(gender, num, combo)]][[as.character(i)]] <- getEndings(ft, above = 0)
max_endings[[paste0(gender, num, combo)]][[as.character(i)]] <- maxSuf(ft)
}
}
}
for (case in global_cases) {
# Only Case
ft <- freqTable(df = sub_df, case = case)
freq_tables[[case]][[as.character(i)]] <- ft
endings[[case]][[as.character(i)]] <- getEndings(ft, above = above)
all_endings[[case]][[as.character(i)]] <- getEndings(ft, above = 0)
max_endings[[case]][[as.character(i)]] <- maxSuf(ft)
# Case & Num
ft <- freqTable(df = sub_df, case = case, num = num)
freq_tables[[paste0(case, num)]][[as.character(i)]] <- ft
endings[[paste0(case, num)]][[as.character(i)]] <- getEndings(ft, above = above)
all_endings[[paste0(case, num)]][[as.character(i)]] <- getEndings(ft, above = 0)
max_endings[[paste0(case, num)]][[as.character(i)]] <- maxSuf(ft)
for (dec in global_decs) {
# Only Declension
ft <- freqTable(df = sub_df, dec = dec)
freq_tables[[as.character(dec)]][[as.character(i)]] <- ft
endings[[as.character(dec)]][[as.character(i)]] <- getEndings(ft, above = above)
all_endings[[as.character(dec)]][[as.character(i)]] <- getEndings(ft, above = 0)
max_endings[[as.character(dec)]][[as.character(i)]] <- maxSuf(ft)
# Declension & Num
ft <- freqTable(df = sub_df, dec = dec, num = num)
freq_tables[[paste0(dec, num)]][[as.character(i)]] <- ft
endings[[paste0(dec, num)]][[as.character(i)]] <- getEndings(ft, above = above)
all_endings[[paste0(dec, num)]][[as.character(i)]] <- getEndings(ft, above = 0)
max_endings[[paste0(dec, num)]][[as.character(i)]] <- maxSuf(ft)
# Declension, Num, & Case
ft <- freqTable(df = sub_df, dec = dec, num = num, case = case)
freq_tables[[paste0(dec, num, case)]][[as.character(i)]] <- ft
if (dec == 5 & above >= 8) {
endings[[paste0(dec, num, case)]][[as.character(i)]] <- getEndings(ft, above = 7)
} else endings[[paste0(dec, num, case)]][[as.character(i)]] <- getEndings(ft, above = above)
all_endings[[paste0(dec, num, case)]][[as.character(i)]] <- getEndings(ft, above = 0)
max_endings[[paste0(dec, num, case)]][[as.character(i)]] <- maxSuf(ft)
}
for (gender in global_genders) {
# Only Gender
ft <- freqTable(df = sub_df, gender = gender)
freq_tables[[gender]][[as.character(i)]] <- ft
endings[[gender]][[as.character(i)]] <- getEndings(ft, above = above)
all_endings[[gender]][[as.character(i)]] <- getEndings(ft, above = 0)
max_endings[[gender]][[as.character(i)]] <- maxSuf(ft)
# Gender & Num
ft <- freqTable(df = sub_df, gender = gender, num = num)
freq_tables[[paste0(gender, num)]][[as.character(i)]] <- ft
endings[[paste0(gender, num)]][[as.character(i)]] <- getEndings(ft, above = above)
all_endings[[paste0(gender, num)]][[as.character(i)]] <- getEndings(ft, above = 0)
max_endings[[paste0(gender, num)]][[as.character(i)]] <- maxSuf(ft)
# Gender, Num, & Case
ft <- freqTable(df = sub_df, gender = gender, num = num, case = case)
freq_tables[[paste0(gender, num, case)]][[as.character(i)]] <- ft
endings[[paste0(gender, num, case)]][[as.character(i)]] <- getEndings(ft, above = above)
all_endings[[paste0(gender, num, case)]][[as.character(i)]] <- getEndings(ft, above = 0)
max_endings[[paste0(gender, num, case)]][[as.character(i)]] <- maxSuf(ft)
# Gender, Num, and Dec COMBOS
for (combo in c("f_1,3,5", "m_2,4", "n_2,4", "m_2,3,4", "m_2,3,4,5")) {
temp_gender <- unlist(strsplit(combo, split = "_"))[1]
temp_dec <- unlist(strsplit(unlist(strsplit(combo, split = "_"))[2], ","))
ft <- freqTable(df = sub_df, gender = temp_gender, dec = temp_dec, num = num)
freq_tables[[paste0(temp_gender, paste(temp_dec, collapse = ""), num)]][[as.character(i)]] <- ft
endings[[paste0(temp_gender, paste(temp_dec, collapse = ""), num)]][[as.character(i)]] <- getEndings(ft, above = 7)
all_endings[[paste0(temp_gender, paste(temp_dec, collapse = ""), num)]][[as.character(i)]] <- getEndings(ft, above = 0)
max_endings[[paste0(temp_gender, paste(temp_dec, collapse = ""), num)]][[as.character(i)]] <- maxSuf(ft)
}
# Create vector to be added to data frame of representative endings
to_add <- paste0(gender, num, case)
# All 4
for (dec in global_decs) {
if (dec %in% c(1, 5) & gender == 'n') {
to_add <- c(to_add, NA)
systems[[as.character(i)]][[paste0(gender, dec, num, case)]] <- NA
next
}
# First, only max endings for gender, declension, number (ignore case)
ft <- freqTable(df = sub_df, gender = gender, dec = dec, num = num)
freq_tables[[paste0(gender, dec, num)]][[as.character(i)]] <- ft
if (dec == 5 & above >= 8) {
endings[[paste0(gender, dec, num)]][[as.character(i)]] <- getEndings(ft, above = 7)
} else endings[[paste0(gender, dec, num)]][[as.character(i)]] <- getEndings(ft, above = above)
all_endings[[paste0(gender, dec, num)]][[as.character(i)]] <- getEndings(ft, above = 0)
max_endings[[paste0(gender, dec, num)]][[as.character(i)]] <- maxSuf(ft)
# Now all 4
ft <- freqTable(df = sub_df, gender = gender, dec = dec, num = num, case = case)
freq_tables[[paste0(gender, dec, num, case)]][[as.character(i)]] <- ft
if (dec == 5 & above >= 8) {
endings[[paste0(gender, dec, num, case)]][[as.character(i)]] <- getEndings(ft, above = 7)
} else endings[[paste0(gender, dec, num, case)]][[as.character(i)]] <- getEndings(ft, above = above)
all_endings[[paste0(gender, dec, num, case)]][[as.character(i)]] <- getEndings(ft, above = 0)
max_endings[[paste0(gender, dec, num, case)]][[as.character(i)]] <- maxSuf(ft)
# Use max endings to determine a "language system"
# if (onlymax == TRUE) {
to_add <- c(to_add, maxSuf(ft))
# } else to_add <- c(to_add, getEndings(ft, above = above))
# Also show systems as vectors to compare
# if (onlymax == TRUE) {
systems[[as.character(i)]][[paste0(gender, dec, num, case)]] <- maxSuf(ft)
# } else systems[[as.character(i)]][[paste0(gender, dec, num, case)]] <- getEndings(ft, above = above)
}
# Now add endings
systems_df[[as.character(i)]] <- rbindlist(list(systems_df[[as.character(i)]], as.list(to_add)))
}
}
}
}
ending_distrib <- lapply(all_endings, count)
ending_distrib <- lapply(all_endings, count)
filtered_ending_distrib <- lapply(endings, count)
filtered_ending_distrib <- lapply(endings, count)
maxending_distrib <- lapply(max_endings, count)
for (combo in names(maxending_distrib)) {
print(combo)
distrib <- maxending_distrib[[combo]]
colnames(distrib)[1] <- "Suffix"
distrib$Percent_Trials <- distrib$freq/sum(distrib$freq)*100
print(distrib[with(distrib, order(-Percent_Trials)), ])
}
to_read <- "../../../Analysis/True_Endings.txt"
if (code == 9) to_read <- paste0(c("../", to_read), collapse = "")
true_systems_df <- read.delim(to_read, stringsAsFactors = FALSE)
true_systems <- list(common_system = structure(true_systems_df$ComSuf, names = true_systems_df$Combo),
NPLtoFSG_system = structure(true_systems_df$NPLFSGSuf, names = true_systems_df$Combo),
romanian_system = structure(true_systems_df$RomSuf, names = true_systems_df$Combo))
systemMatch <- function(systems, true_system) {
system_match <- c()
for (system in systems) {
system <- system[names(true_system)]
# Vector of truth values to show if same or not
compare <- c()
for (combo in names(system)) {
suffixes <- unlist(strsplit(system[combo], ','))
compare <- c(compare, any(suffixes %in% unlist(strsplit(true_system[combo], ','))))
}
nmatch <- sum(compare[!is.na(compare)])
percent_match <- nmatch/length(!is.na(system))*100
system_match <- c(system_match, percent_match)
}
system_distrib <- count(system_match)
colnames(system_distrib)[1] <- "Percent_Match"
system_distrib[["Percent_Trials"]] <- system_distrib$freq/sum(system_distrib$freq)*100
return(system_distrib)
}
system_distribs <- list()
for (system_name in names(true_systems)) {
system_distribs[[paste(system_name, "distrib", sep = "_")]] <- systemMatch(systems, true_systems[[system_name]])
}
for (dec in global_decs) {
true_dec_systems <- lapply(true_systems, function(x) x[grep(dec, names(x))])
for (system_name in names(true_dec_systems)) {
system_distribs[[paste(dec, system_name, "distrib", sep = "_")]] <- systemMatch(systems, true_dec_systems[[system_name]])
}
}
for (gender in global_genders) {
true_gen_systems <- lapply(true_systems, function(x) x[grep(paste0(gender, '[[:digit:]]'), names(x))])
for (system_name in names(true_gen_systems)) {
system_distribs[[paste(gender, system_name, "distrib", sep = "_")]] <- systemMatch(systems, true_gen_systems[[system_name]])
}
}
for (case in global_cases) {
true_case_systems <- lapply(true_systems, function(x) x[grep(case, names(x))])
for (system_name in names(true_case_systems)) {
system_distribs[[paste(case, system_name, "distrib", sep = "_")]] <- systemMatch(systems, true_case_systems[[system_name]])
}
}
for (case in global_cases) {
true_case_systems <- lapply(true_systems, function(x) x[grep(case, names(x))])
for (system_name in names(true_case_systems)) {
system_distribs[[paste(case, system_name, "distrib", sep = "_")]] <- systemMatch(systems, true_case_systems[[system_name]])
}
}
for (num in global_nums) {
true_num_systems <- lapply(true_systems, function(x) x[grep(num, names(x))])
for (system_name in names(true_num_systems)) {
system_distribs[[paste(num, system_name, "distrib", sep = "_")]] <- systemMatch(systems, true_num_systems[[system_name]])
}
}
for (num in global_nums) {
true_num_systems <- lapply(true_systems, function(x) x[grep(num, names(x))])
for (system_name in names(true_num_systems)) {
system_distribs[[paste(num, system_name, "distrib", sep = "_")]] <- systemMatch(systems, true_num_systems[[system_name]])
}
}
for (system_name in names(system_distribs)) {
print(system_name)
system <- system_distribs[[system_name]]
print(system)
hist(rep(system$Percent_Match, system$Percent_Trials), xlim = c(0,100), ylim = c(0, 100), xlab = "Percent Matching True System", ylab = "Percent of Trials", main = paste0("Percent of ", system_name, " Matching Reality"))
}
checkSame <- function(system, to_search) {
to_compare <- list()
for (combo in to_search) {
to_compare[[combo]] <- system[grep(combo, names(system))]
# If we want to compare n2 AND 4 to f1
if (grepl("f1", combo)) to_compare[[combo]] <- rep(to_compare[[combo]], 2)
}
equal_vector <- is.equal(to_compare)[!is.na(is.equal(to_compare))]
return(sum(equal_vector)/length(equal_vector)*100)
}
to_compare <- c("n.Sg(Nom|Acc),m.Sg(Nom|Acc)",
"n.Pl(Nom|Acc),m.Pl(Nom|Acc)",
"n.Pl(Nom|Acc),f.Sg(Nom|Acc)",
"n.Pl(Nom|Acc),f.Pl(Nom|Acc)",
"m.Pl(Nom|Acc),f.Pl(Nom|Acc)",
"1.*(Nom|Acc),5.*(Nom|Acc)",
"2.*(Nom|Acc),4.*(Nom|Acc)",
"2Sg(Nom|Acc),4Sg(Nom|Acc)", "2Pl(Nom|Acc),4Pl(Nom|Acc)",
"n[24]Sg(Nom|Acc),m[24]Sg(Nom|Acc)",
"n[24]Pl(Nom|Acc),m[24]Pl(Nom|Acc)",
"n[24]Pl(Nom|Acc),f1Sg(Nom|Acc)",
"n[24]Pl(Nom|Acc),f1Pl(Nom|Acc)",
"m[24]Pl(Nom|Acc),f1Sg(Nom|Acc)",
"m[24]Pl(Nom|Acc),f1Pl(Nom|Acc)",
"m.Sg(Nom|Acc),m.Pl(Nom|Acc)",
"f.Sg(Nom|Acc),f.Pl(Nom|Acc)",
"n.Sg(Nom|Acc),n.Pl(Nom|Acc)")
if (ncases == 2) { to_compare <- gsub("\\(Nom\\|Acc\\)", "", to_compare)
} else {
if (ncases == 3) { to_compare <- c(to_compare, gsub("Nom", "Gen", to_compare), gsub("Acc", "Gen", to_compare))
# Check Nom/Acc, Acc/Abl, Nom/Acc/Abl
} else if (ncases == 5) to_compare <- c(to_compare, gsub("(Nom|Acc)", "", to_compare), gsub("Nom", "Abl", to_compare), gsub("Acc", "Acc|Abl", to_compare))
to_compare <- c(to_compare, gsub("\\(Nom\\|Acc\\)", "", to_compare))
}
to_compare <- c(to_compare, global_casecombos, paste(global_cases, collapse = ','))
comparisons <- list()
for (comparison in to_compare) {
# Vector of percentage same to create distribution
percent_same <- c()
to_search <- unlist(strsplit(comparison, ','))
for (system in systems) {
percent_same <- c(percent_same, checkSame(system, to_search))
}
compare_distrib <- count(percent_same)
colnames(compare_distrib)[1] <- "Percent_Match"
compare_distrib[["Percent_Trials"]] <- compare_distrib$freq/sum(compare_distrib$freq)*100
comparisons[[comparison]] <- compare_distrib
}
for (comparison in to_compare) {
# Vector of percentage same to create distribution
percent_same <- c()
to_search <- unlist(strsplit(comparison, ','))
for (system in systems) {
percent_same <- c(percent_same, checkSame(system, to_search))
}
compare_distrib <- count(percent_same)
colnames(compare_distrib)[1] <- "Percent_Match"
compare_distrib[["Percent_Trials"]] <- compare_distrib$freq/sum(compare_distrib$freq)*100
comparisons[[comparison]] <- compare_distrib
}
nPlmPl_percentsame <- c()
nPlfPl_percentsame <- c()
for (system in systems) {
# nPl and mPl but NOT fPl
nPlmPl_samevector <- system[grep('n.Pl', names(system))] == system[grep('m.Pl', names(system))] & system[grep('n.Pl', names(system))] != system[grep('f.Pl', names(system))]
# nPl and fPl but NOT mPl
nPlfPl_samevector <- system[grep('n.Pl', names(system))] == system[grep('f.Pl', names(system))] & system[grep('n.Pl', names(system))] != system[grep('m.Pl', names(system))]
# Now get percentages
for (combo in c("nPlmPl", "nPlfPl")) {
assign(paste0(combo, "_samevector"), eval(parse(text = paste0(combo, "_samevector")))[!is.na(eval(parse(text = paste0(combo, "_samevector"))))])
assign(paste0(combo, "_percentsame"), c(eval(parse(text = paste0(combo, "_percentsame"))), sum(eval(parse(text = paste0(combo, "_samevector"))))/length(eval(parse(text = paste0(combo, "_samevector"))))*100))
}
}
for (combo in c("nPlmPl_percentsame", "nPlfPl_percentsame")) {
combo_same <- eval(parse(text = combo))
compare_distrib <- count(combo_same)
colnames(compare_distrib)[1] <- "Percent_Match"
compare_distrib[["Percent_Trials"]] <- compare_distrib$freq/sum(compare_distrib$freq)*100
comparisons[[gsub("_.*", "_exclusive", combo)]] <- compare_distrib
}
for (comparison_name in names(comparisons)) {
print(comparison_name)
comparison <- comparisons[[comparison_name]]
print(comparison)
hist(rep(comparison$Percent_Match, comparison$Percent_Trials), xlim = c(0,100), ylim = c(0, 100), xlab = "Percent Matching Each Other", ylab = "Percent of Trials", main = paste0("Percent of ", comparison_name, " Matching Each Other"))
}
for (comparison_name in names(comparisons)) {
print(comparison_name)
comparison <- comparisons[[comparison_name]]
print(comparison)
hist(rep(comparison$Percent_Match, comparison$Percent_Trials), xlim = c(0,100), ylim = c(0, 100), xlab = "Percent Matching Each Other", ylab = "Percent of Trials", main = paste0("Percent of ", comparison_name, " Matching Each Other"))
}
par(mar=c(7,6,3,2))
hist(rep(comparisons$`n.Pl,m.Pl`$Percent_Match, comparisons$`n.Pl,m.Pl`$Percent_Trials),
xlim = c(0,100), ylim = c(0, 100),
xlab = "",
ylab = expression(bold("Percent of Trials")),
cex.lab=2.5,
cex.axis=1.75,
cex.main=3,
# cex.sub=1.5,
main = "NPL and MPL Match")
?hist
print(hist(rep(comparisons$`n.Pl,m.Pl`$Percent_Match, comparisons$`n.Pl,m.Pl`$Percent_Trials),
xlim = c(0,100), ylim = c(0, 100),
xlab = "",
ylab = expression(bold("Percent of Trials")),
cex.lab=2.5,
cex.axis=1.75,
cex.main=3,
# cex.sub=1.5,
main = "NPL and MPL Match"))
hist(rep(comparisons$`n.Pl,m.Pl`$Percent_Match, comparisons$`n.Pl,m.Pl`$Percent_Trials),
xlim = c(0,100), ylim = c(0, 100),
xlab = "",
ylab = expression(bold("Percent of Trials")),
cex.lab=2.5,
cex.axis=1.75,
cex.main=3,
# cex.sub=1.5,
main = "NPL and MPL Match")
?hist
comparisons$`n.Pl,m.Pl`$Percent_Match
comparisons$`n.Pl,m.Pl`$Percent_Trials
hist(rep(comparisons$`n.Pl,m.Pl`$Percent_Match, comparisons$`n.Pl,m.Pl`$Percent_Trials))
hist(rep(comparisons$`n.Pl,m.Pl`$Percent_Match, comparisons$`n.Pl,m.Pl`$Percent_Trials),
xlim = c(0,100), ylim = c(0, 100),
xlab = "",
ylab = expression(bold("Percent of Trials")),
cex.lab=2.5,
cex.axis=1.75,
cex.main=3,
# cex.sub=1.5,
main = "NPL and MPL Match")
hist(rep(comparisons$`n.Pl,m.Pl`$Percent_Match, comparisons$`n.Pl,m.Pl`$Percent_Trials),
xlim = c(0,100), ylim = c(0, 100),
xlab = "",
ylab = expression(bold("Percent of Trials")),
# cex.lab=2.5,
# cex.axis=1.75,
# cex.main=3,
# cex.sub=1.5,
main = "NPL and MPL Match")
hist(x = rep(comparisons$`n.Pl,m.Pl`$Percent_Match, comparisons$`n.Pl,m.Pl`$Percent_Trials),
xlim = c(0,100), ylim = c(0, 100),
xlab = "",
ylab = expression(bold("Percent of Trials")),
# cex.lab=2.5,
# cex.axis=1.75,
# cex.main=3,
# cex.sub=1.5,
main = "NPL and MPL Match")
hist(x = rep(comparisons$`n.Pl,m.Pl`$Percent_Match, comparisons$`n.Pl,m.Pl`$Percent_Trials),
xlim = c(0,100), ylim = c(0, 100),
# xlab = "",
# ylab = expression(bold("Percent of Trials")),
# cex.lab=2.5,
# cex.axis=1.75,
# cex.main=3,
# cex.sub=1.5,
main = "NPL and MPL Match")
hist(x = rep(comparisons$`n.Pl,m.Pl`$Percent_Match, comparisons$`n.Pl,m.Pl`$Percent_Trials),
# xlim = c(0,100), ylim = c(0, 100),
# xlab = "",
# ylab = expression(bold("Percent of Trials")),
# cex.lab=2.5,
# cex.axis=1.75,
# cex.main=3,
# cex.sub=1.5,
main = "NPL and MPL Match")
hist(x = rep(comparisons$`n.Pl,m.Pl`$Percent_Match, comparisons$`n.Pl,m.Pl`$Percent_Trials))
comparisons$`n.Pl,m.Pl`$Percent_Trials
hist(x = rep(comparisons$`n.Pl,m.Pl`$Percent_Match, comparisons$`n.Pl,m.Pl`$Percent_Trials))
hist(rep(comparisons$`n.Pl,m.Pl`$Percent_Match, comparisons$`n.Pl,m.Pl`$Percent_Trials))
par(mar=c(7,6,3,2))
hist(rep(comparisons$`n.Pl,m.Pl`$Percent_Match, comparisons$`n.Pl,m.Pl`$Percent_Trials))
dev.off()
